#!/bin/bash

# Vineyard Costmap Web Application Demo Script
# This script demonstrates the complete React-based web application for vineyard costmap management

echo "🍇 Vineyard Costmap Web Application Demo 🍇"
echo "=============================================="
echo ""

# Check if we're in the right directory
if [ ! -d "vineyard_costmap_web" ]; then
    echo "❌ Error: Please run this script from the directory containing vineyard_costmap_web/"
    exit 1
fi

cd vineyard_costmap_web

echo "📋 System Overview:"
echo "==================="
echo "✅ React Frontend with TypeScript and Material-UI"
echo "✅ FastAPI Backend with PostgreSQL database"
echo "✅ ROS2 Bridge integration via WebSocket"
echo "✅ Docker containerization for easy deployment"
echo "✅ Real-time costmap visualization with Leaflet"
echo "✅ Parameter control panels for detection tuning"
echo "✅ Processing job monitoring and management"
echo "✅ Satellite imagery upload and management"
echo "✅ User authentication and role-based access"
echo ""

echo "🏗️  Architecture Components:"
echo "============================="
echo "Frontend (React + TypeScript):"
echo "  - 📱 Dashboard with system status"
echo "  - 🗺️  Interactive costmap viewer"
echo "  - 🖼️  Satellite image management"
echo "  - ⚙️  Parameter control panels"
echo "  - 📊 Processing job monitoring"
echo "  - 🎯 Mission planning interface"
echo ""
echo "Backend (FastAPI + Python):"
echo "  - 🔐 Authentication and user management"
echo "  - 📂 File upload and storage"
echo "  - 🔄 ROS2 service integration"
echo "  - 📈 Job queue management"
echo "  - 💾 Parameter preset storage"
echo ""
echo "ROS2 Integration:"
echo "  - 🌉 WebSocket bridge via rosbridge_server"
echo "  - 🛠️  Service calls to costmap generation"
echo "  - 📡 Real-time topic subscriptions"
echo "  - 📊 System status monitoring"
echo ""

echo "🐳 Docker Services:"
echo "==================="
echo "Services defined in docker-compose.yml:"
echo "  🐘 PostgreSQL Database (port 5432)"
echo "  🍃 Redis Cache (port 6379)"
echo "  🖥️  Backend API Server (port 8000)"
echo "  🌐 Frontend React App (port 3000)"
echo "  🌉 ROSbridge WebSocket Server (port 9090)"
echo ""

echo "📁 Project Structure:"
echo "====================="
echo "vineyard_costmap_web/"
echo "├── frontend/                 # React TypeScript application"
echo "│   ├── src/"
echo "│   │   ├── components/      # Reusable UI components"
echo "│   │   │   ├── costmap/     # Costmap visualization"
echo "│   │   │   └── parameters/  # Parameter control panels"
echo "│   │   ├── services/        # API and ROS service clients"
echo "│   │   ├── hooks/           # Custom React hooks"
echo "│   │   ├── types/           # TypeScript type definitions"
echo "│   │   └── pages/           # Application pages"
echo "│   ├── public/              # Static assets"
echo "│   └── package.json         # Frontend dependencies"
echo "├── backend/                 # FastAPI Python server"
echo "│   ├── src/                 # Python source code"
echo "│   └── requirements.txt     # Python dependencies"
echo "├── docker-compose.yml       # Multi-service deployment"
echo "└── README.md                # Documentation"
echo ""

echo "🔧 Key Features Implemented:"
echo "============================="
echo ""
echo "1. 📊 Real-time Dashboard:"
echo "   - System status monitoring"
echo "   - Active job tracking"
echo "   - Service availability display"
echo "   - Connection status indicators"
echo ""
echo "2. 🗺️  Interactive Costmap Viewer:"
echo "   - Leaflet-based map display"
echo "   - Multi-layer visualization"
echo "   - Zoom and pan controls"
echo "   - Layer opacity adjustment"
echo "   - Cost value color coding"
echo ""
echo "3. 🖼️  Satellite Image Management:"
echo "   - Drag-and-drop upload interface"
echo "   - GPS coordinate input"
echo "   - Image preview and metadata"
echo "   - Batch processing support"
echo ""
echo "4. ⚙️  Parameter Control System:"
echo "   - Row detection parameters"
echo "   - Costmap generation settings"
echo "   - Processing configuration"
echo "   - Preset save/load functionality"
echo ""
echo "5. 📈 Processing Job Monitor:"
echo "   - Real-time progress tracking"
echo "   - Job status visualization"
echo "   - Error reporting and logging"
echo "   - Queue management"
echo ""
echo "6. 🌉 ROS2 Integration:"
echo "   - WebSocket communication"
echo "   - Service call handlers"
echo "   - Topic subscriptions"
echo "   - Connection management"
echo ""

echo "🚀 Getting Started:"
echo "==================="
echo ""
echo "1. Prerequisites:"
echo "   ✅ Docker and Docker Compose"
echo "   ✅ Node.js 18+ (for development)"
echo "   ✅ Python 3.11+ (for development)"
echo "   ✅ ROS2 Jazzy (for ROS integration)"
echo ""
echo "2. Quick Start with Docker:"
echo "   $ cd vineyard_costmap_web"
echo "   $ docker-compose up -d"
echo "   $ open http://localhost:3000"
echo ""
echo "3. Development Setup:"
echo "   # Frontend"
echo "   $ cd frontend"
echo "   $ npm install"
echo "   $ npm run dev"
echo "   "
echo "   # Backend"
echo "   $ cd backend"
echo "   $ pip install -r requirements.txt"
echo "   $ python src/main.py"
echo "   "
echo "   # ROS2 Bridge"
echo "   $ ros2 launch rosbridge_server rosbridge_websocket_launch.xml"
echo ""

echo "🔌 API Endpoints:"
echo "================="
echo "Authentication:"
echo "  POST /api/auth/login         # User login"
echo "  GET  /api/auth/me            # Current user info"
echo ""
echo "Satellite Images:"
echo "  POST /api/satellite-images   # Upload image"
echo "  GET  /api/satellite-images   # List images"
echo "  DELETE /api/satellite-images/{id}  # Delete image"
echo ""
echo "Costmaps:"
echo "  GET  /api/costmaps           # List costmaps"
echo "  GET  /api/costmaps/{id}      # Get costmap"
echo "  GET  /api/costmaps/{id}/export # Export costmap"
echo ""
echo "Processing Jobs:"
echo "  GET  /api/processing-jobs    # List jobs"
echo "  POST /api/processing-jobs/{id}/cancel # Cancel job"
echo ""
echo "Parameters:"
echo "  GET  /api/parameters/presets # List presets"
echo "  POST /api/parameters/presets # Save preset"
echo ""
echo "System:"
echo "  GET  /api/system/status      # System status"
echo ""

echo "🌐 Web Interface Features:"
echo "=========================="
echo ""
echo "Dashboard Page:"
echo "  📊 System status cards"
echo "  📈 Processing job progress"
echo "  🔌 Service availability"
echo "  📱 Responsive design"
echo ""
echo "Costmap Viewer:"
echo "  🗺️  Interactive map with zoom/pan"
echo "  🎨 Layer visibility controls"
echo "  📏 Opacity adjustment sliders"
echo "  📍 Coordinate display"
echo "  📊 Costmap information panel"
echo ""
echo "Image Upload:"
echo "  📁 Drag-and-drop interface"
echo "  🌍 GPS bounds input"
echo "  👁️  Image preview"
echo "  📋 Metadata display"
echo ""
echo "Parameter Control:"
echo "  🔧 Real-time parameter adjustment"
echo "  💾 Preset save/load"
echo "  🔄 Default value reset"
echo "  ✅ Parameter validation"
echo ""

echo "🔗 Integration with Existing ROS2 System:"
echo "=========================================="
echo ""
echo "The web application integrates with your existing ROS2 costmap system:"
echo ""
echo "✅ Uses vineyard_mower_interfaces services:"
echo "   - GenerateCostmap.srv"
echo "   - UpdateCostmapLayer.srv"
echo "   - GetCostmapInfo.srv"
echo ""
echo "✅ Connects to your costmap generation nodes:"
echo "   - satellite_processor.py"
echo "   - costmap_generator.py"
echo "   - costmap_service.py"
echo ""
echo "✅ Subscribes to ROS2 topics:"
echo "   - /costmap/updates (nav_msgs/OccupancyGrid)"
echo "   - /costmap/job_updates (std_msgs/String)"
echo ""
echo "✅ Compatible with your configuration:"
echo "   - Uses same parameter structure"
echo "   - Respects costmap format"
echo "   - Maintains ROS2 conventions"
echo ""

echo "🎯 Use Cases:"
echo "=============="
echo ""
echo "1. 🧑‍🌾 Farm Operator:"
echo "   - Upload satellite imagery of vineyard"
echo "   - Adjust detection parameters visually"
echo "   - Generate costmaps for navigation"
echo "   - Monitor processing progress"
echo "   - Export maps for field use"
echo ""
echo "2. 🔬 Agricultural Researcher:"
echo "   - Compare different parameter settings"
echo "   - Analyze detection algorithm performance"
echo "   - Batch process multiple field images"
echo "   - Export data for analysis"
echo ""
echo "3. 🤖 System Administrator:"
echo "   - Monitor ROS2 system health"
echo "   - Manage processing job queues"
echo "   - Configure system parameters"
echo "   - Troubleshoot connectivity issues"
echo ""

echo "📝 Next Steps:"
echo "==============="
echo ""
echo "To complete the implementation:"
echo ""
echo "1. 🏗️  Build the interfaces package:"
echo "   $ cd ../src/vineyard_mower_interfaces"
echo "   $ colcon build --packages-select vineyard_mower_interfaces"
echo ""
echo "2. 🚀 Start the web application:"
echo "   $ cd vineyard_costmap_web"
echo "   $ docker-compose up -d"
echo ""
echo "3. 🔗 Launch ROS2 costmap services:"
echo "   $ ros2 launch vineyard_mower_navigation costmap_generation.launch.py"
echo ""
echo "4. 🌐 Access the web interface:"
echo "   $ open http://localhost:3000"
echo ""
echo "5. 🧪 Test the integration:"
echo "   - Upload a satellite image"
echo "   - Adjust detection parameters"
echo "   - Generate a costmap"
echo "   - View results in the map viewer"
echo ""

echo "✨ The complete React-based web application is now ready!"
echo "🍇 Happy vineyard navigation! 🍇"
